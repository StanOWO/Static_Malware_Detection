import os
from math import log
import numpy as np
from PIL import Image
import pandas as pd

def pe2hex(file_path, output_file_path) -> None:
    print('Processing '+file_path)
    file = bytearray(open(file_path, 'rb').read())
    key = "\0"
    with open(output_file_path, 'w') as output:
        for count, byte in enumerate(file, 1):
            output.write(f'{byte ^ ord(key[(count - 1) % len(key)]):#0{4}x}' + ('\n' if not count % 16 else ' '))
    print('done')
          
def hex2img(array, output_img_path) -> None:
    if array.shape[1]!=16: #If not hexadecimal
        assert(False)
    b=int((array.shape[0]*16)**(0.5))
    b=2**(int(log(b)/log(2))+1)
    a=int(array.shape[0]*16/b)
    print(a,b,array.shape)
    array=array[:a*b//16,:]
    array=np.reshape(array,(a,b))
    im = Image.fromarray(np.uint8(array))
    im.save(output_img_path, "PNG")
    print('done')

def main(pe_data_path,bytes_data_path,img_data_path,json_path):
    if not os.path.exists(pe_data_path):
        print("Unexist Malware Path")
        return
    
    json_file = pd.read_json(path_or_buf=json_path, lines=True)

    files= os.listdir(pe_data_path)
    pe_file_length=len(files)
    
    if not os.path.exists(bytes_data_path):
        os.makedirs(bytes_data_path)
    
    for counter, name in enumerate(files):
        name_output = name.split(".")[0]
        print(f"label {counter+1}/{pe_file_length}: {name_output}")
        pe2hex(os.path.join(pe_data_path,name), os.path.join(bytes_data_path,name_output+".bytes"))

    if not os.path.exists(img_data_path):
        os.makedirs(img_data_path)
        
    files= os.listdir(bytes_data_path)
    byte_file_length=len(files)
    for counter, name in enumerate(files):
        name_output = name.split(".")[0]
        md5 = name_output.split("_")[1]
       
        a = 0
    
        
        for line in json_file["md5"]:
            if(line == md5):
                label = json_file["reported_family"][a]
                print(f"label {counter+1}/{byte_file_length}: {label}")
            a+=1
                    
        
        if not os.path.exists(os.path.join(img_data_path,label)):
            os.makedirs(os.path.join(img_data_path,label))
        
        output_image_path = os.path.join(img_data_path,label,name_output+".png")
        
        print('Processing '+output_image_path)

        f=open(os.path.join(bytes_data_path,name), 'r')
        
        array=[]
        for line in f:
            xx=line.replace("\n", "").split(" ")

            if(len(xx) != 16 or "" in xx):
                continue
            
            array.append([int(i,16) if i!='??' else 0 for i in xx])
        
        img = hex2img(np.array(array),output_image_path)
        
        del array

        f.close()
        
if __name__=="__main__":
    # Path
    pe_data_path = "MOTIF_defanged"
    bytes_data_path = "bytes_data_HW"
    img_data_path = "image_data_HW"
    json_path = "motif_dataset.jsonl"
    main(pe_data_path,bytes_data_path,img_data_path,json_path)